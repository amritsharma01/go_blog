basePath: /
definitions:
  errors.ErrorResponse:
    properties:
      error:
        type: string
      status:
        type: integer
    type: object
  requestmodels.CategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requestmodels.CreatePostRequest:
    properties:
      category_id:
        description: optional
        type: integer
      description:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  requestmodels.CreateUserRequest:
    properties:
      email:
        minLength: 1
        type: string
      name:
        minLength: 1
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  requestmodels.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requestmodels.UpdatePostRequest:
    properties:
      category_id:
        description: optional
        type: integer
      description:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  responsemodels.AuthorInfo:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  responsemodels.CategoryInfo:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  responsemodels.CategoryResponse:
    properties:
      cid:
        type: integer
      cname:
        type: string
    type: object
  responsemodels.JSONResponseStruct:
    properties:
      data: {}
      message:
        type: string
    type: object
  responsemodels.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/responsemodels.UserResponse'
    type: object
  responsemodels.PaginatedResponse:
    properties:
      data: {}
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  responsemodels.PostResponse:
    properties:
      author:
        $ref: '#/definitions/responsemodels.AuthorInfo'
      category:
        $ref: '#/definitions/responsemodels.CategoryInfo'
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  responsemodels.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample CRUD API with JWT authentication.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CRUD API
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requestmodels.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.JSONResponseStruct'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/responsemodels.LoginResponse'
                  - properties:
                      user:
                        $ref: '#/definitions/responsemodels.UserResponse'
                    type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Authenticate user
      tags:
      - users
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requestmodels.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.JSONResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/responsemodels.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /v1/authors/{author_id}/posts:
    get:
      consumes:
      - application/json
      description: Get paginated list of posts by specific author
      parameters:
      - description: Author ID
        in: path
        name: author_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responsemodels.PostResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get posts by author
      tags:
      - posts
  /v1/categories:
    get:
      consumes:
      - application/json
      description: Get a paginated list of categories
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responsemodels.CategoryResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/requestmodels.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.JSONResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/responsemodels.CategoryResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new category
      tags:
      - categories
  /v1/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - categories
  /v1/posts:
    get:
      consumes:
      - application/json
      description: Get paginated list of posts with optional filters
      parameters:
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by category ID
        in: query
        name: category_id
        type: string
      - description: Filter by author ID
        in: query
        name: author_id
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responsemodels.PostResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get list of posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new blog post (requires authentication)
      parameters:
      - description: Post content
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/requestmodels.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.JSONResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/responsemodels.PostResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /v1/posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post (only by author or admin)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responsemodels.JSONResponseStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get details of a specific post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.JSONResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/responsemodels.PostResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get post details
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update an existing post (only by author)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated post content
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/requestmodels.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.JSONResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/responsemodels.PostResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - posts
  /v1/users:
    get:
      description: Retrieve list of all users (requires admin JWT)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responsemodels.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responsemodels.UserResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
